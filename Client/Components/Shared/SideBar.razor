@inject AppState AppState
@implements IDisposable

@using Client.StateContainers;
@using Client.Models;

<aside class="sidenav @(AppState.SideBarType != "bg-default" ? "bg-white" : "bg-default")  navbar navbar-vertical navbar-expand-xs border-0 border-radius-xl my-3 fixed-start ms-4 " id="sidenav-main" data-color="@AppState.SideBarColor">
	<div class="sidenav-header">
		<i class="fas fa-times p-3 cursor-pointer text-secondary opacity-5 position-absolute end-0 top-0 d-none d-xl-none" aria-hidden="true" id="iconSidenav"></i>
		<a class="navbar-brand m-0" href="/default" target="_blank">
			<img src="@AppState.SideBarLogo" class="navbar-brand-img h-100" alt="main_logo">
			<span class="ms-1 font-weight-bold">@sideBarTitle</span>
		</a>
	</div>
	<hr class="horizontal dark mt-0">
	<div class="collapse navbar-collapse  w-auto h-auto" id="sidenav-collapse-main">
		<ul class="navbar-nav">
			@foreach (SideBarMenuItem sideBarMenuItem in sideBarMenuItemList)
			{
				@if (sideBarMenuItem.Type == "Break")
				{
					<li class="nav-item mt-3">
						<h6 class="ps-4  ms-2 text-uppercase text-xs font-weight-bolder opacity-6">@sideBarMenuItem.Name.ToUpper()</h6>
					</li>
				}
				else
				{
					<li class="nav-item">
						<a data-bs-toggle="collapse" href="#@sideBarMenuItem.Id" class="nav-link @css[sideBarMenuItem.SequenceId]" aria-controls="@sideBarMenuItem.Id" role="button" aria-expanded="false">
							<div class="icon icon-shape icon-sm text-center d-flex align-items-center justify-content-center">
								<i class="@sideBarMenuItem.Icon text-sm opacity-10"></i>
							</div>
							<span class="nav-link-text ms-1">@sideBarMenuItem.Name</span>
						</a>
						<div class="collapse " id="@sideBarMenuItem.Id">
							<ul class="nav ms-4">
								@foreach (MenuItem mainMenuItem in sideBarMenuItem.MainMenuItemList)
								{

									@if (@mainMenuItem.MenuItemList.Count > 0)
									{
										<li class="nav-item ">
											<NavLink class="nav-link " data-bs-toggle="collapse" aria-expanded="false" href="@("#"+mainMenuItem.Id)">
												<span class="sidenav-mini-icon"> @mainMenuItem.Title?.First().ToString().ToUpper() </span>
												<span class="sidenav-normal"> @mainMenuItem.Title <b class="caret"></b></span>
											</NavLink>
											<div class="collapse" id="@mainMenuItem.Id">
												<ul class="nav nav-sm flex-column">
													@foreach (MenuItem menuItem in @mainMenuItem.MenuItemList)
													{
														<li class="nav-item" @onclick=@(() => NavLinkOnClick(@menuItem.Title))>
															<NavLink class="nav-link " href="@menuItem.Link">
																<span class="sidenav-mini-icon text-xs"> @menuItem.Title?.First().ToString().ToUpper() </span>
																<span class="sidenav-normal"> @menuItem.Title </span>
															</NavLink>
														</li>
													}
												</ul>
											</div>
										</li>
									}
									else
									{
										<li class="nav-item" @onclick=@(() => NavLinkOnClick(@mainMenuItem.Title))>
											<NavLink class="nav-link" href="@mainMenuItem.Link">
												<span class="sidenav-mini-icon"> @mainMenuItem.Title?.First().ToString().ToUpper() </span>
												<span class="sidenav-normal"> @mainMenuItem.Title </span>
											</NavLink>
										</li>
									}
								}
							</ul>
						</div>
					</li>
				}
			}
		</ul>
	</div>
	<div class="sidenav-footer mx-3 my-3">
		<div class="card card-plain shadow-none" id="sidenavCard">
			Footer vmi
			<img class="w-60 mx-auto" src="../../assets/img/illustrations/icon-documentation.svg" alt="sidebar_illustration">
			<div class="card-body text-center p-3 w-100 pt-0">
				<div class="docs-info">
					<h6 class="mb-0">Need help?</h6>
					<p class="text-xs font-weight-bold mb-0">Please check our docs</p>
				</div>
			</div>
		</div>
		@*<a href="https://www.creative-tim.com/learning-lab/bootstrap/overview/argon-dashboard" target="_blank" class="btn btn-dark btn-sm w-100 mb-3">Documentation</a>*@
	</div>
</aside>

@code {

	string sideBarTitle = "DashMate - Blazor";
	private List<string> css = new List<string> { "", "", "", "", "" };

	async Task NavLinkOnClick(string normalTitle)
	{
		SideBarMenuItem activeMenuItem = sideBarMenuItemList.Where(p => p.MainMenuItemList.Any(o => o.Title == normalTitle)).FirstOrDefault();

		if (activeMenuItem == null)
			activeMenuItem = sideBarMenuItemList.Where(p => p.MainMenuItemList.Any(o => o.MenuItemList.Any(n => n.Title == normalTitle))).FirstOrDefault();

		css[0] = (activeMenuItem?.Name == "Dashboards") ? "active" : "";
		css[1] = (activeMenuItem?.Name == "Pages") ? "active" : "";
		css[2] = (activeMenuItem?.Name == "Applications") ? "active" : "";
		css[3] = (activeMenuItem?.Name == "Ecommerce") ? "active" : "";
		css[4] = (activeMenuItem?.Name == "Authentication") ? "active" : "";

		AppState.SetNavBarSelectedMainMenu(activeMenuItem.Name);
		AppState.SetNavBarSelectedMenu(normalTitle);

	}

	protected override void OnInitialized()
	{
		AppState.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		AppState.OnChange -= StateHasChanged;
	}


	List<SideBarMenuItem> sideBarMenuItemList = new List<SideBarMenuItem>
	{
		 new SideBarMenuItem{ SequenceId = 0, Name = "Dashboards", Id = "dashboardsExamples", Icon = "ni ni-shop text-primary" , MainMenuItemList =dashboardMenuItems},
		 new SideBarMenuItem{  SequenceId = 99, Name = "PAGES" , Type = "Break"},
		 new SideBarMenuItem{ SequenceId = 1, Name = "Pages" , Id = "pagesExamples",  Icon = "ni ni-ungroup text-warning",
		  MainMenuItemList = new List<MenuItem>
		 {
			new MenuItem{ Title = "Profile" , MenuItemList = profileMenuItems, Id = "profileExample"},
			new MenuItem{ Title = "Users" , MenuItemList = usersMenuItems, Id = "usersExample"  },
			new MenuItem{ Title = "Account" , MenuItemList = accountMenuItems, Id = "accountExample" },
			new MenuItem{ Title = "Projects" , MenuItemList =  projectMenuItems, Id = "projectsExample" },
			new MenuItem{ Title = "Pricing Page" , Link = "/pricingpage"  },
			new MenuItem{ Title = "RTL"  ,Link = "/rtl"},
			new MenuItem{ Title = "Widgets"  ,Link = "/widgets"},
			new MenuItem{ Title = "Charts"  ,Link = "/charts"},
			new MenuItem{ Title = "Sweet Alerts"  ,Link = "/notifications"},
			new MenuItem{ Title = "Notifications"  ,Link = "/noticifation"},
			new MenuItem{ Title = "Chat" ,Link = "/chat" },
			new MenuItem{ Title = "Syncfusion"  ,Link = "/syncfusion"},

		 }},
		 new SideBarMenuItem{ SequenceId = 2, Name = "Applications" , Id = "applicationsExamples",  Icon = "ni ni-ui-04 text-info", MainMenuItemList =applicationsMenuItems},
		 new SideBarMenuItem{  SequenceId = 3,Name = "Ecommerce" , Id = "ecommerceExamples",  Icon = "ni ni-archive-2 text-success",
		 MainMenuItemList = new List<MenuItem>
		 {
			new MenuItem{ Title = "Overview" , Link = "/overview"  },
			new MenuItem{ Title = "Products" , MenuItemList = productsMenuItems, Id = "productsExample"  },
			new MenuItem{ Title = "Orders" ,   MenuItemList = ordersMenuItems, Id = "ordersExample" },
			new MenuItem{ Title = "Referral" ,  Link = "/referral" },

		 }},
		 new SideBarMenuItem{  SequenceId = 4, Name = "Authentication" , Id = "authExamples",  Icon = "ni ni-single-copy-04 text-danger",
		 MainMenuItemList = new List<MenuItem>
		 {
			new MenuItem{ Title = "Sing In" , MenuItemList = singinMenuItems, Id = "signinExample"},
			new MenuItem{ Title = "Sing Up" , MenuItemList = singupMenuItems, Id = "signupExample"  },
			new MenuItem{ Title = "Reset Password" , MenuItemList = resetMenuItems, Id = "resetExample" },
			new MenuItem{ Title = "Lock" , MenuItemList = lockMenuItems, Id = "lockExample" },
			new MenuItem{ Title = "2-Step Verification" , MenuItemList = verificationMenuItems , Id = "stepExample"},
			new MenuItem{ Title = "Error" , MenuItemList = errorMenuItems , Id = "errorExample"},

		 }}
	};


	static List<MenuItem> dashboardMenuItems = new List<MenuItem>
	{
		//new MenuItem{ Link = "/landing",  MiniTitle = "L" , NormalTitle =  "Landing"  },
		new MenuItem{ Link = "default",  Title =  "Default"  },
		new MenuItem{ Link = "automotive",  Title =  "Automotive"  },
		new MenuItem{ Link = "smarthome", Title =  "Smart Home"  },
		//new MenuItem{ Link = "/virtualreality",  MiniTitle = "V" , NormalTitle =  "Virtual Reality"  },
		new MenuItem{ Link = "crm",  Title =  "CRM"  }
	};

	static List<MenuItem> applicationsMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "kanban",   Title =  "Kanban"  },
		new MenuItem{ Link = "wizard",  Title =  "Wizard"  },
		new MenuItem{ Link = "datatables",   Title =  "DataTables"  },
		new MenuItem{ Link = "calendar",  Title =  "Calendar"  },
		new MenuItem{ Link = "analytics",   Title =  "Analytics"  }
	};

	//Pages

	static List<MenuItem> profileMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "profileoverview",   Title =  "Profile Overview"  },
		new MenuItem{ Link = "teams",  Title =  "Teams"  },
		new MenuItem{ Link = "allproject",  Title =  "All Projects"  }
	};
	public static List<MenuItem> usersMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "reports",   Title =  "Reports"  },
		new MenuItem{ Link = "newuser",   Title =  "New User"  },
	};
	static List<MenuItem> accountMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "settings",  Title =  "Settings"  },
		new MenuItem{ Link = "billing",  Title =  "Billing"  },
		new MenuItem{ Link = "invoice",  Title =  "Invoice"  },
		new MenuItem{ Link = "security",  Title =  "Security"  },
	};
	static List<MenuItem> projectMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "general",  Title =  "General"  },
		new MenuItem{ Link = "timeline",  Title =  "Timeline"  },
		new MenuItem{ Link = "newproject",   Title =  "New Project"  },

	};
	static List<MenuItem> pagesMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "pricingpage",  Title =  "Pricing Page"  },
		new MenuItem{ Link = "rtl",  Title =  "RTL"  },
		new MenuItem{ Link = "widgets",  Title =  "Widgets"  },
		new MenuItem{ Link = "charts",  Title =  "Charts"  },
		new MenuItem{ Link = "sweetalerts",   Title =  "Sweet Alerts"  },
		new MenuItem{ Link = "notifications",  Title =  "Notifications"  },
		new MenuItem{ Link = "chat",  Title =  "Chat"  },
		new MenuItem{ Link = "syncfusion",  Title =  "Syncfusion"  }
	};

	//Ecommerce

	static List<MenuItem> productsMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "newproduct",  Title =  "New Product"  },
		new MenuItem{ Link = "editproduct",  Title =  "Edit Product"  },
		new MenuItem{ Link = "productpage",   Title =  "Product Page"  },
		new MenuItem{ Link = "productslist",   Title =  "Products List"  },
	};
	static List<MenuItem> ordersMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "orderlist",   Title =  "Order List"  },
		new MenuItem{ Link = "orderdetail",  Title =  "Order Details"  }
	};

	//Authentication

	static List<MenuItem> singinMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "signinbasic",  Title =  "Basic"  },
		new MenuItem{ Link = "signincover", Title =  "Cover"  },
		new MenuItem{ Link = "signinillustration",  Title =  "Illustration"  },
	};
	static List<MenuItem> singupMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "signupbasic", Title =  "Basic"  },
		new MenuItem{ Link = "signupcover",  Title =  "Cover"  },
		new MenuItem{ Link = "signupillustration", Title =  "Illustration"  },
	};
	static List<MenuItem> resetMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "resetbasic", Title =  "Basic"  },
		new MenuItem{ Link = "resetcover",  Title =  "Cover"  },
		new MenuItem{ Link = "resetillustration", Title =  "Illustration"  },
	};
	static List<MenuItem> lockMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "lockbasic", Title =  "Basic"  },
		new MenuItem{ Link = "lockcover",  Title =  "Cover"  },
		new MenuItem{ Link = "lockillustration", Title =  "Illustration"  },
	};
	static List<MenuItem> verificationMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "verificationbasic", Title =  "Basic"  },
		new MenuItem{ Link = "verificationcover",  Title =  "Cover"  },
		new MenuItem{ Link = "verificationillustration", Title =  "Illustration"  },
	};
	static List<MenuItem> errorMenuItems = new List<MenuItem>
	{
		new MenuItem{ Link = "404",  Title =  "Error 404"  },
		new MenuItem{ Link = "500",  Title =  "Error 500"  }
	};
}
