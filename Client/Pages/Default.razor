@page "/"
@page "/default"
@using Client.Services.AccountService;
@using Client.Services.TesztService;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccountService IAccountService
@inject ITesztService ITesztService

<div class="container-fluid py-4">
	<div class="row">

		<div class="col-lg-3 col-md-6 col-12">
			<div class="card  mb-4">
				<div class="card-body p-3">
					<div class="row">
						
						<button @onclick="Logout">Logout</button>
						<AuthorizeView>
							<Authorized>
								Hello, @context.User.Identity.Name!
								<button @onclick="Logout">Logout</button>
							</Authorized>
							<NotAuthorized>
								<a href="Register">Register</a>
								<a href="Login">Log in</a>
							</NotAuthorized>
						</AuthorizeView>
					</div>
					<div class="row">
						<h1>ClaimsPrincipal Data</h1>

						<button @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>

						<p>@authMessage</p>

						@if (claims.Count() > 0)
						{
							<ul>
								@foreach (var claim in claims)
								{
									<li>@claim.Type: @claim.Value</li>
								}
							</ul>
						}

						<p> Surname: @surname</p>
					</div>
				</div>
			</div>
		</div>

		<div class="col-lg-3 col-md-6 col-12">
			<div class="card  mb-4">
				<div class="card-body p-3">
					<div class="row">

						<button @onclick="Teszt1">Teszt1</button> Result = @teszt1Result

						<button @onclick="Teszt2">Teszt2</button> Result = @teszt2Result

					</div>
				</div>
			</div>
		</div>
		


	</div>
</div>

@code
{
	private string? authMessage;
	private string? surname;
	private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();


	string teszt1Result = "t1";

	string teszt2Result = "t1";

	private async Task Logout()
	{
		IAccountService.Logout();
	}

	private async Task Teszt1()
	{
		 ITesztService.Teszt1();
	}

	private async Task Teszt2()
	{
		ITesztService.Teszt2();
	}

	private async Task GetClaimsPrincipalData()
	{
		var authState = await AuthenticationStateProvider
			.GetAuthenticationStateAsync();
		var user = authState.User;

		

		if (user.Identity is not null && user.Identity.IsAuthenticated)
		{
			

			authMessage = $"{user.Identity.Name} is authenticated. with type {user.Identity.AuthenticationType}";
			claims = user.Claims;
			surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
		}
		else
		{
			authMessage = "The user is NOT authenticated.";
		}
	}
}